{"version":3,"sources":["ultis/columns.js","components/Filter.js","components/Table.js","App.js","reportWebVitals.js","index.js"],"names":["COLUMNS","Header","accessor","Filter","filter","setFilter","value","placeholder","onChange","e","target","Table","props","columns","useMemo","data","useTable","useGlobalFilter","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","state","setGlobalFilter","globalFilter","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","App","useState","posts","setPosts","useEffect","axios","get","then","res","results","obj","first_name","name","first","last_name","last","city","location","age","dob","email","phone","console","log","catch","err","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"sQAAaA,EAAU,CACnB,CACIC,OAAQ,aACRC,SAAU,cAEd,CACID,OAAQ,YACRC,SAAU,aAEd,CACID,OAAQ,OACRC,SAAU,QAEd,CACID,OAAQ,QACRC,SAAU,SAEd,CACID,OAAQ,MACRC,SAAU,OAEd,CACID,OAAQ,SACRC,SAAU,SAEd,CACID,OAAQ,QACRC,SAAU,U,6BCxBLC,EAAS,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,UAC5B,OACI,+BACI,uBACIC,MAAOF,GAAU,GACjBG,YAAa,uBACbC,SAAU,SAAAC,GAAC,OAAIJ,EAAUI,EAAEC,OAAOJ,aCJrCK,G,MAAQ,SAACC,GAClB,IAAMC,EAAUC,mBAAQ,kBAAMF,EAAMC,UAAS,IACvCE,EAAOD,mBAAQ,kBAAMF,EAAMG,OAAM,IAFX,EAYxBC,mBAAS,CACTH,UACAE,QACDE,kBAAiBC,aAVhBC,EALwB,EAKxBA,cACAC,EANwB,EAMxBA,kBACAC,EAPwB,EAOxBA,aACAC,EARwB,EAQxBA,KACAC,EATwB,EASxBA,WACAC,EAVwB,EAUxBA,MACAC,EAXwB,EAWxBA,gBAMIC,EAAiBF,EAAjBE,aAER,OACI,gCACI,cAAC,EAAD,CAAQtB,OAAQsB,EAAcrB,UAAWoB,IACzC,kDAAWN,KAAX,cACI,gCACKE,EAAaM,KAAI,SAAAC,GAAW,OACzB,8CAAQA,EAAYC,uBAApB,aACKD,EAAYE,QAAQH,KAAI,SAAAI,GAAM,OAC3B,+CAAQA,EAAOC,eAAeD,EAAOE,yBAArC,cACKF,EAAOG,OAAO,UACf,+BACKH,EAAOI,SACFJ,EAAOK,aACH,gBACA,gBACJ,oBAO9B,iDAAWhB,KAAX,aACKE,EAAKK,KAAI,SAAAU,GAEN,OADAd,EAAWc,GAEP,8CAAQA,EAAIC,eAAZ,aACKD,EAAIE,MAAMZ,KAAI,SAAAa,GACX,OACI,8CAAQA,EAAKC,gBAAb,aAA8BD,EAAKN,OAAO,gC,iBCfnEQ,MAjCf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,KA0BX,OAvBAC,qBAAU,WACNC,IAAMC,IAAI,iFACLC,MAAK,SAAAC,GACF,IACMnC,EADOmC,EAAInC,KAAKoC,QACJxB,KAAI,SAAAyB,GAClB,MAAO,CACHC,WAAYD,EAAIE,KAAKC,MACrBC,UAAWJ,EAAIE,KAAKG,KACpBC,KAAMN,EAAIO,SAASD,KACnBlC,MAAO4B,EAAIO,SAASnC,MACpBoC,IAAKR,EAAIS,IAAID,IACbE,MAAOV,EAAIU,MACXC,MAAOX,EAAIW,UAGnBC,QAAQC,IAAIlD,GACZ8B,EAAS9B,MAEZmD,OAAM,SAAAC,GACHH,QAAQC,IAAIE,QAErB,IAGC,8BACI,cAAC,EAAD,CAAOtD,QAASb,EAASe,KAAM6B,OCrB5BwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAAS1C,OACP,cAAC,IAAM2C,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.e2fe5d4c.chunk.js","sourcesContent":["export const COLUMNS = [\r\n    {\r\n        Header: 'First Name',\r\n        accessor: 'first_name'\r\n    },\r\n    {\r\n        Header: 'Last Name',\r\n        accessor: 'last_name'\r\n    },\r\n    {\r\n        Header: 'City',\r\n        accessor: 'city'\r\n    },\r\n    {\r\n        Header: 'State',\r\n        accessor: 'state'\r\n    },\r\n    {\r\n        Header: 'Age',\r\n        accessor: 'age'\r\n    },\r\n    {\r\n        Header: 'E-mail',\r\n        accessor: 'email'\r\n    },\r\n    {\r\n        Header: 'Phone',\r\n        accessor: 'phone'\r\n    }\r\n];","import React from 'react';\r\nimport './Filter.css'\r\n\r\nexport const Filter = ({filter, setFilter}) => {\r\n    return (\r\n        <span>\r\n            <input\r\n                value={filter || ''}\r\n                placeholder={'Search table here...'}\r\n                onChange={e => setFilter(e.target.value)}\r\n            />\r\n        </span>\r\n    )\r\n};","import React, { useMemo } from 'react';\r\nimport { useTable, useGlobalFilter, useSortBy } from 'react-table';\r\nimport { Filter } from './Filter';\r\nimport './Table.css';\r\n\r\nexport const Table = (props) => {\r\n    const columns = useMemo(() => props.columns, []);\r\n    const data = useMemo(() => props.data, []);\r\n\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n        state,\r\n        setGlobalFilter\r\n    } = useTable({\r\n        columns,\r\n        data\r\n    }, useGlobalFilter, useSortBy)\r\n\r\n    const { globalFilter } = state;\r\n\r\n    return (\r\n        <div>\r\n            <Filter filter={globalFilter} setFilter={setGlobalFilter}/>\r\n            <table {...getTableProps()}>\r\n                <thead>\r\n                    {headerGroups.map(headerGroup => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            {headerGroup.headers.map(column => (\r\n                                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                                    {column.render('Header')}\r\n                                    <span>\r\n                                        {column.isSorted\r\n                                            ? column.isSortedDesc\r\n                                                ? ' ðŸ”½'\r\n                                                : ' ðŸ”¼'\r\n                                            : ''}\r\n                                    </span>\r\n                                </th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {rows.map(row => {\r\n                        prepareRow(row)\r\n                        return (\r\n                            <tr {...row.getRowProps()}>\r\n                                {row.cells.map(cell => {\r\n                                    return (\r\n                                        <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                                    )\r\n                                })}\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n};","import React, { useState, useEffect } from 'react';\nimport { COLUMNS } from './ultis/columns';\nimport { Table } from './components/Table';\nimport axios from 'axios';\n\nfunction App() {\n  const [posts, setPosts] = useState([]);\n\n    useEffect(() => {\n        axios.get('https://randomuser.me/api?results=10&nat=us&inc=name,location,email,dob,phone')\n            .then(res => {\n                const objs = res.data.results;\n                const data = objs.map(obj => {\n                    return {\n                        first_name: obj.name.first,\n                        last_name: obj.name.last,\n                        city: obj.location.city,\n                        state: obj.location.state,\n                        age: obj.dob.age,\n                        email: obj.email,\n                        phone: obj.phone\n                    }\n                })\n                console.log(data);\n                setPosts(data);\n            })\n            .catch(err => {\n                console.log(err);\n            });\n    }, []);\n\n    return (\n        <div>\n            <Table columns={COLUMNS} data={posts}/>\n        </div>\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}